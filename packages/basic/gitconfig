[user]
	name = $<GIT_USERNAME>
	email = $<GIT_USEREMAIL>
[apply]
	whitespace = fix
[core]
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space,cr-at-eol
	editor = vim
[color]
	ui = true
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold        # Metadata (file paths, etc.)
	commit = yellow bold      # Commit information.
	frag = magenta bold       # Line information
	old = red bold            # Deletions
	new = green bold          # Additions
	whitespace = red reverse
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[diff]
	renames = copies
[diff "bin"]
	textconf = hexdump -v -C
[gc]
	auto = 0
	autopacklimit = 0
	packrefs = 0
[push]
	default = simple
[alias]
	# SVN-esque commands
	st = status
	ci = commit
	br = branch
	bra = branch -vva
	co = checkout
	df = diff --stat --patch --raw
	dc = diff --cached --stat --patch --raw
	ls = ls-files
	ign = ls-files -o -i --exclude-standard

	# =========================================================
	# Different log views.
	# - graph logs
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	log2 = log --graph --decorate --pretty=format:'------------------------------%n[%C(magenta)%h%Creset] %C(yellow)%cn <%ce>%Creset %C(cyan)%d%Creset %n%cd %n%Cgreen%s%Creset%n------------------------------' --abbrev-commit
	# - patchlog
	lg = log -p
	# - date log (commit age oriented)
	dlog = log --graph --decorate --abbrev-commit --date=short --date-order --pretty=format:'%Cred%h %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%ad>%Creset'
	# - changelog (user oriented)
	clog = log --date-order --pretty=format:'<%C(cyan)%an%Creset> [%ad] (%C(yellow)%h%Creset) %s'
	# - lieutenant changelog (author and committer)
	lclog = log --date-order --pretty=format:'<%C(cyan)%an%Creset (%C(cyan)%ad%Creset)> [%C(bold blue)%cn%Creset (%C(bold blue)%cd%Creset)] (%C(yellow)%h%Creset) %s'

	# GitHub shortlinks.
	hubclone = "!sh -c 'git clone http://github.com/$1/$2.git --origin upstream'" -
	hubremote-add = "!sh -c 'git remote add $1 http://github.com/$1/$2.git'" -

	# Lieutenant work helpers.
	recover = "!bash -c '~/bin/git-recover.sh $1'" -
	rewrite = "!bash -c '~/bin/git-rewrite.sh $1 $2'" -
	conflicts = !echo $(git status --short | grep '^[DAU][DAU] ' | cut -d' ' -f2 | tr '\n' ' ')
	farbc = "!fixall() { \
			git status --short | cut -d' ' -f2 | xargs git add; \
			git rebase --continue; \
		}; fixall" -

	# Show the oldest ancestor (the branching point) between master and HEAD
	# (or first and second argument). For example, this is the commit a rebase
	# will go back to.
	oldest-ancestor = !bash -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
