[user]
	name = Git User Please set
	email = git.user@please.set
[apply]
	whitespace = fix
[core]
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space,cr-at-eol
	editor = vim
[color]
	ui = true
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold   # Line info
	old = red bold        # Deletions
	new = green bold      # Additions
	whitespace = red reverse
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[diff]
	renames = copies
[diff "bin"]
	textconf = hexdump -v -C
[alias]
	# SVN-esque commands
	st = status
	ci = commit
	br = branch
	bra = branch -vva
	co = checkout
	df = diff --stat --patch --raw
	dc = diff --cached --stat --patch --raw
	ls = ls-files
	ign = ls-files -o -i --exclude-standard
	
	# =========================================================
	# Different log views
	# - graph logs
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	log2 = log --graph --decorate --pretty=format:'------------------------------%n[%C(magenta)%h%Creset] %C(yellow)%cn <%ce>%Creset %C(cyan)%d%Creset %n%cd %n%Cgreen%s%Creset%n------------------------------' --abbrev-commit
	# - patchlog
	lg = log -p 
	# - date log (commit age oriented)
	dlog = log --graph --decorate --abbrev-commit --date=short --date-order --pretty=format:'%Cred%h %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%ad>%Creset'
	# - changelog (user-oriented)
	clog = log --date-order --pretty=format:'<%C(cyan)%an%Creset> [%ad] (%C(yellow)%h%Creset) %s'
	
	# GitHub shortlinks
	hubclone = "!sh -c 'git clone http://github.com/$1/$2.git --origin upstream'" -
	hubremote-add = "!sh -c 'git remote add $1 http://github.com/$1/$2.git'" -
	
	# Lieutenant work helpers
	recover = "!bash -c '~/bin/git-recover.sh $1'" -
	rewrite = "!bash -c '~/bin/git-rewrite.sh $1 $2'" -
	fall = fetch -v --all
	ffmerge = merge --ff-only
	cbr = rev-parse --abbrev-ref HEAD
	oldest-ancestor = !bash -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
	
	# Assume (mark change as unchanged)
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assume-all = "!git st -s | awk {'print $2'} | xargs git assume"
	assumeall = "!git assume-all"
	unassume-all = "!git assumed | xargs git update-index --no-assume-unchanged"
	unassumeall = "!git unassume-all"
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	lsa = "!git assumed"
	
	# Miscellaneous
	dump = cat-file -p
[gc]
	auto = 0
	autopacklimit = 0
	packrefs = 0
